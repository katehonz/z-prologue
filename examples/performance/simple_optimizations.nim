## –ü—Ä–æ—Å—Ç –ø—Ä–∏–º–µ—Ä –∑–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç—Ç–∞ –≤ Prologue
## –¢–æ–∑–∏ –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–∞ –æ—Å–Ω–æ–≤–Ω–∏ —Ç–µ—Ö–Ω–∏–∫–∏ –∑–∞ –ø–æ–¥–æ–±—Ä—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç—Ç–∞

import std/[asyncdispatch, json, strutils, times]
import prologue

# === ROUTE HANDLERS ===

proc getUserById(ctx: Context) {.async, gcsafe.} =
  ## –ü–æ–ª—É—á–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –ø–æ ID
  let userId = ctx.getPathParams("id", "")
  
  # –°–∏–º—É–ª–∏—Ä–∞ –∑–∞—è–≤–∫–∞ –∫—ä–º –±–∞–∑–∞ –¥–∞–Ω–Ω–∏
  await sleepAsync(50) # 50ms –∑–∞–±–∞–≤—è–Ω–µ
  
  # –ü—Ä–∏–º–µ—Ä–Ω–∏ –¥–∞–Ω–Ω–∏ (–≤ —Ä–µ–∞–ª–Ω–æ—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∏—Ö–∞ –±–∏–ª–∏ –æ—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω–∏)
  case userId:
  of "1":
    ctx.response.body = """{"id": 1, "name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "email": "ivan@example.com"}"""
  of "2":
    ctx.response.body = """{"id": 2, "name": "–ú–∞—Ä–∏—è –ì–µ–æ—Ä–≥–∏–µ–≤–∞", "email": "maria@example.com"}"""
  of "3":
    ctx.response.body = """{"id": 3, "name": "–ü–µ—Ç—ä—Ä –î–∏–º–∏—Ç—Ä–æ–≤", "email": "peter@example.com"}"""
  else:
    ctx.response.code = Http404
    ctx.response.body = """{"error": "User not found"}"""
  
  ctx.response.headers["Content-Type"] = "application/json"

proc getAllUsers(ctx: Context) {.async, gcsafe.} =
  ## –ü–æ–ª—É—á–∞–≤–∞ –≤—Å–∏—á–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
  # –°–∏–º—É–ª–∏—Ä–∞ –∑–∞—è–≤–∫–∞ –∫—ä–º –±–∞–∑–∞ –¥–∞–Ω–Ω–∏
  await sleepAsync(100) # 100ms –∑–∞–±–∞–≤—è–Ω–µ
  
  let usersJson = """{
    "users": [
      {"id": 1, "name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "email": "ivan@example.com"},
      {"id": 2, "name": "–ú–∞—Ä–∏—è –ì–µ–æ—Ä–≥–∏–µ–≤–∞", "email": "maria@example.com"},
      {"id": 3, "name": "–ü–µ—Ç—ä—Ä –î–∏–º–∏—Ç—Ä–æ–≤", "email": "peter@example.com"}
    ]
  }"""
  
  ctx.response.body = usersJson
  ctx.response.headers["Content-Type"] = "application/json"

proc getMetricsHandler(ctx: Context) {.async, gcsafe.} =
  ## –í—Ä—ä—â–∞ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç
  let response = """{
    "status": "running",
    "users_count": 3,
    "timestamp": """ & "\"" & $now() & "\"" & """
  }"""
  
  ctx.response.body = response
  ctx.response.headers["Content-Type"] = "application/json"

proc healthCheck(ctx: Context) {.async, gcsafe.} =
  ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∑–¥—Ä–∞–≤–µ—Ç–æ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ
  let response = """{
    "status": "healthy",
    "timestamp": """ & "\"" & $now() & "\"" & """,
    "uptime": "running"
  }"""
  
  ctx.response.body = response
  ctx.response.headers["Content-Type"] = "application/json"

# === MIDDLEWARE –ó–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–ù–û–°–¢ ===

proc performanceMiddleware(): HandlerAsync =
  ## Middleware –∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç—Ç–∞
  result = proc (ctx: Context) {.async, gcsafe.} =
    let startTime = epochTime()
    
    # –ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞ –∫—ä–º —Å–ª–µ–¥–≤–∞—â–∏—è middleware/handler
    await switch(ctx)
    
    let endTime = epochTime()
    let requestTime = endTime - startTime
    
    # –î–æ–±–∞–≤—è header —Å –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞
    ctx.response.headers["X-Response-Time"] = $(requestTime * 1000) & "ms"

# === –ì–õ–ê–í–ù–ê –§–£–ù–ö–¶–ò–Ø ===

proc main() {.async.} =
  # –°—ä–∑–¥–∞–≤–∞ Prologue –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  var app = newApp()
  
  # –î–æ–±–∞–≤—è middleware –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç
  app.use(performanceMiddleware())
  
  # –î–µ—Ñ–∏–Ω–∏—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∏
  app.get("/users/{id}", getUserById)
  app.get("/users", getAllUsers)
  app.get("/metrics", getMetricsHandler)
  app.get("/health", healthCheck)
  
  # –î–æ–±–∞–≤—è –æ—Å–Ω–æ–≤–µ–Ω –º–∞—Ä—à—Ä—É—Ç
  app.get("/", proc (ctx: Context) {.async, gcsafe.} =
    ctx.response.body = """
    <h1>Prologue Performance Demo</h1>
    <p>–ù–∞–ª–∏—á–Ω–∏ endpoints:</p>
    <ul>
      <li><a href="/users">GET /users</a> - –í—Å–∏—á–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏</li>
      <li>GET /users/1 - –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID 1</li>
      <li>GET /users/2 - –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID 2</li>
      <li>GET /users/3 - –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID 3</li>
      <li><a href="/metrics">GET /metrics</a> - –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç</li>
      <li><a href="/health">GET /health</a> - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∑–¥—Ä–∞–≤–µ</li>
    </ul>
    <p>–¢–æ–∑–∏ –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–∞:</p>
    <ul>
      <li>Middleware –∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –æ—Ç–≥–æ–≤–æ—Ä</li>
      <li>–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏</li>
      <li>JSON API endpoints</li>
      <li>–°–∏–º—É–ª–∞—Ü–∏—è –Ω–∞ –∑–∞–±–∞–≤—è–Ω–µ –Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω–∏</li>
    </ul>
    """)
  
  echo "üöÄ –°—ä—Ä–≤—ä—Ä—ä—Ç —Å—Ç–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ http://localhost:8080"
  echo "üìä –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏—Ç–µ –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç —Å–∞ –∞–∫—Ç–∏–≤–Ω–∏"
  echo "‚è±Ô∏è  Middleware –∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ –µ –≤–∫–ª—é—á–µ–Ω"
  
  app.run()

when isMainModule:
  waitFor main()